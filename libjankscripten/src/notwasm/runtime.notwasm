// Lazily-initialized global variables. DO NOT READ FROM THESE UNTIL THEY HAVE
// BEEN WRITTEN TO.
var Object: DynObject;
var global: DynObject;

// Cached Object properties to be used in jnks_new_object.
// ASSUMPTION: Object.prototype is never modified by user code.
var jnks_objectCreate: (any) -> any;
var jnks_objectPrototype: any;

// Initialize JankScripten runtime.
function jnks_init() {
    // Create the Object class. This means creating a (really) empty object,
    // giving it a prototype, and assigning its static methods, such as
    // Object.create.
    // 
    // Once the default Object class is set up, object literals like `{}` can
    // be used.

    // load the Object.create runtime function
    var objectCreate = rt(object_create);

    // create the actual object for Object
    var nullVar = null;
    var objectClass = objectCreate(nullVar);
    Object = objectClass as DynObject;

    // set a completely empty prototype
    var objectPrototype = objectCreate(nullVar);
    Object.prototype = objectPrototype;

    // assign static methods to Object
    Object.create = any(objectCreate);

    // Cache Object properties for jnks_new_object
    jnks_objectCreate = objectCreate;
    jnks_objectPrototype = objectPrototype;

    // Now that the default Object class has been set up, create the global 
    // object.
    global = {};
}

// Runtime function to create a regular empty object like `{}` or
// `new Object()`.
function jnks_new_object(): DynObject {
    // Create new object that inherits from Object.prototype.
    var objectCreate = jnks_objectCreate;
    var newObject = objectCreate(jnks_objectPrototype);
    return newObject as DynObject;
}
