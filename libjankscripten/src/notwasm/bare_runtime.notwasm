// this is the minimal runtime which doesn't initialize the standard library,
// and only does the bare minimum to allow {} to work
// this plus std_lib.notwasm comprises the entire notwasm runtime
// this file can be merged without std_lib.notwasm for a minimal working
// notwasm

var undefined: any;

// abusing lazy globals to create a null DynObject for jnks_new_object
var jnks_null_dynobject: DynObject;

// Cached Object properties to be used in jnks_new_object.
// ASSUMPTION: Object.prototype is never modified by user code.
var jnks_objectCreate: clos(env, any) -> any;
// this is needed for an awful check in jnks_new_object, explained there
// the type is bool, but notwasm sucks and can't compare bools, so here we are
var jnks_objectCreateExists: i32 = 0;
var jnks_objectPrototype: any;

// Initialize JankScripten runtime.
function jnks_init() {
    // load the Object.create runtime function
    var objectCreateF = rt(object_create);
    // comma is obligatory to indicate an empty environment
    var objectCreate = clos(objectCreateF, );
    jnks_objectCreate = objectCreate;
    jnks_objectCreateExists = 1;
    var getUndefined = rt(get_undefined);
    undefined = getUndefined();
    jnks_init_std_lib();
}

// this is a placeholder that will be replaced with the actual initialization
// iff it's not disabled
function jnks_init_std_lib(): i32 {
    // notwasm limitation
    return 0;
}

// Runtime function to create a regular empty object like `{}` or
// `new Object()`.
function jnks_new_object(): DynObject {
    var objectCreate = jnks_objectCreate;
    var newObject = objectCreate!(jnks_objectPrototype);
    return newObject as DynObject;
}

// Create an empty object to be used as a function object.
// The only current difference between this function and jnks_new_object
// is that a `prototype` field is automatically initialized here.
function jnks_new_fn_obj(): DynObject {
    // Create new object that inherits from Object.prototype,
    // AND has a `prototype` field automatically initialized.

    // a new fn object is created to store in the closure of... you guessed it,
    // objectCreate. so we need to give a fake object for that closure
    // only. this hopefully won't be necessary after we optimize non-object
    // functions.

    if (jnks_objectCreateExists == 1) {
        var newObject = jnks_new_object();
        var newObjectProto = jnks_new_object();
        newObject.prototype = any(newObjectProto);
        return newObject;
    } else {}
    // not written as an if-else because wasm typechecking strictness
    // this thing may or may not even be null. it doesn't really matter
    return jnks_null_dynobject;

}
